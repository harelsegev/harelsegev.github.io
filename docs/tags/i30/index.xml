<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>$I30 on RAT In Mi Kitchen</title>
    <link>https://harelsegev.github.io/tags/i30/</link>
    <description>Recent content in $I30 on RAT In Mi Kitchen</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 29 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://harelsegev.github.io/tags/i30/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>$I30 Parsers Output False Entries. Here&#39;s Why</title>
      <link>https://harelsegev.github.io/posts/i30-parsers-output-false-entries.-heres-why/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://harelsegev.github.io/posts/i30-parsers-output-false-entries.-heres-why/</guid>
      <description>In the README page of my tool, INDXRipper (Go check it out! It&amp;rsquo;s really cool), down in the &amp;ldquo;Limitations&amp;rdquo; section, I gave some warnings regarding the reliability of the tool:
The tool may give false results. While false positives are rare, they are possible.
Partially overwritten entries may not be found. If they are found, though, the tool may give you false information.
These shortcomings apply to every $I30 parser, and in this post - I&amp;rsquo;ll explain why.</description>
      <content:encoded><![CDATA[<p>In the README page of my tool, <a href="https://github.com/harelsegev/INDXRipper">INDXRipper</a> (Go check it out! It&rsquo;s really cool), down in the &ldquo;Limitations&rdquo; section, I gave some warnings regarding the reliability of the tool:</p>
<blockquote>
<p>The tool may give false results. While false positives are rare, they are possible.</p>
</blockquote>
<blockquote>
<p>Partially overwritten entries may not be found. If they are found, though, the tool may give you false information.</p>
</blockquote>
<p>These shortcomings apply to <em>every</em> $I30 parser, and in this post - I&rsquo;ll explain why. First, I will give an overview of directories in NTFS, and talk a bit about how $I30 parsers work. Then, I&rsquo;ll show you a case where a $I30 parser outputs a false entry, and explain how I try to avoid them in INDXRipper.</p>
<h2 id="ntfs-directories">NTFS Directories</h2>
<p>In NTFS, a directory is ultimately a collection of entries - one (or more) for every file it contains. Those entries live in a sorted data structure called a B-tree, to allow fast access to files. B-trees are similar to binary search trees, except they are not binary - a node can have more than 2 child-nodes:</p>
<p><img loading="lazy" src="images/b_tree.svg" alt=""  />
</p>
<p>As you can see, each node can store multiple entries. The nodes are laid out sequentially inside an index attribute (<code>$INDEX_ROOT</code> or <code>$INDEX_ALLOCATION</code>), so a $I30 parser can iterate over them without having to deal with the tree structure.</p>
<p>Inside each node, the entries are sorted by filename. As the following diagram illustrates, they can have different sizes - so each entry has a 2-byte field containing the relative offset of the next entry:</p>
<p><img loading="lazy" src="images/i30_before_deletion.svg" alt=""  />
</p>
<p>When a file is moved in or out of a directory, an entry is created or removed from the tree, respectively. This sometimes causes the tree to rebalance itself - which may cause other, non-related entries to be removed from their node and re-created in another node.</p>
<p>Let&rsquo;s see what happens if entry <em><strong>B</strong></em> is removed from the above 4-entry node:</p>
<p><img loading="lazy" src="images/i30_after_deletion.svg" alt=""  />
</p>
<p>Entries <em><strong>C</strong></em> and <em><strong>D</strong></em> were simply shifted left. Now, this node contains <em>slack space</em> - space at the end of the node that isn&rsquo;t used by either one of the entries, and is marked here with red diagonal stripes. As you can see, it contains a complete copy of entry <em><strong>D</strong></em> and a partially overwritten copy of entry <em><strong>C</strong></em> from before they were shifted.</p>
<p>These diagrams showcase some of the unique qualities of this artifact:</p>
<ul>
<li>Not every removed entry will have remnants in slack space (Entry <em><strong>B</strong></em>)</li>
<li>Entries that were <strong>not</strong> removed may have remnants in slack space (Entry <em><strong>C</strong></em> and <em><strong>D</strong></em>)</li>
<li>Entries in slack space may be partially overwritten (Entry <em><strong>C</strong></em>)</li>
</ul>
<h2 id="carving-entries-from-i30-slack-space">Carving Entries From $I30 Slack Space</h2>
<p>As we have just seen, the content of $I30 slack space is unpredictable. To recover file metadata from it, $I30 parsers utilize techniques that are very similar to file carving.</p>
<p>File carvers often rely on file signatures to detect files in unallocated space. Unfortunately, $I30 entries don&rsquo;t have a standard header or a fixed signature they can be detected with. However, the file metadata they contain can itself be used to build carving rules.</p>
<p>Most $I30 parsers base their carving rules on the set of MACB timestamps that $I30 entries contain. A sequence of 4 timestamps makes an really good carving rule, because timestamps only make sense within a very small range of values.</p>
<p>A Windows FILETIME timestamp has a range of +/- 29,227 years from its epoch of 1601. If you find a sequence of 4 values that are all within a reasonable range when interpreted as timestamps (say, 1990 - 2030), that&rsquo;s probably not a coincidence.</p>
<h2 id="false-entries">False Entries</h2>
<p>Sometimes it <strong>is</strong> a coincidence, though. Here&rsquo;s a snippet from a really weird output I got from <a href="https://github.com/williballenthin/INDXParse">INDXParse</a> when I executed it on the index attribute of a directory on my system:</p>
<p><img loading="lazy" src="images/indxparse_output.png" alt=""  />
</p>
<p>The file in the first line looks normal. The last two lines, however - are messed up:</p>
<ul>
<li>The second line is almost completely empty, except an unprintable character and a lowercase O in the filename field.</li>
</ul>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>The file in the third line has a physical size of roughly 118 <strong>Petabytes</strong>, which is a <em>tiny</em> bit more than my hard drive&rsquo;s storage capacity. Its name looks cut-off, and a creation time of 2015 is odd, considering all the other files in that directory were created much later.</li>
</ul>
<p>The entry this data was pulled from is partially overwritten - which might explain this output. Let&rsquo;s take a look at this entry in hex, and try to figure out what&rsquo;s going on:</p>
<p><img loading="lazy" src="images/slack_entry_fragment.png" alt=""  />
</p>
<p>What&rsquo;s marked in yellow is a special entry indicating the end of a node. Everything below it is in slack space - including the entry we&rsquo;re interested in. Although it&rsquo;s partially overwritten, the file metadata inside our entry is still intact:</p>
<ul>
<li>The filename is marked in blue.</li>
<li>The 4 MACB timestamps are marked in green.</li>
<li>The file&rsquo;s physical size is marked in brown.</li>
<li>The red byte is the filename length in characters.</li>
</ul>
<p>What&rsquo;s marked in purple is the <em>file reference</em> of the parent directory. It&rsquo;s composed of the directory&rsquo;s MFT entry number (first 6 bytes) and a sequence number (last 2 bytes).</p>
<p>All of this file metadata is completely valid. This is the output we would have got if this entry were parsed correctly:</p>
<table>
<thead>
<tr>
<th>Filename</th>
<th>Physical Size</th>
<th>Logical Size</th>
<th>Creation Time</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AlarmsAppList.targetsize-16_contrast-black.png</code></td>
<td>4096</td>
<td>243</td>
<td>06/03/2020</td>
</tr>
</tbody>
</table>
<p>INDXParse should have detected the set of 4 MACB timestamps, and should have given us this output. What went wrong? Well&hellip; everything.</p>
<p>By pure chance, the file reference of the parent directory is also a reasonable timestamp:</p>
<p><img loading="lazy" src="images/timestamp.png" alt=""  />
</p>
<p>Looks familiar? It&rsquo;s the weird creation time from the third output line! INDXParse detected this file reference as a <strong>timestamp</strong>. The fields that come after it are the <em>actual</em> timestamps, so that lead to the detection of a wrong set of 4 timestamps:</p>
<p><img loading="lazy" src="images/false_entry.png" alt=""  />
</p>
<p>This - my friends, is a false entry. It overlaps with our real entry - which makes this a bit confusing. The fields marked <em>here</em> belong to the false entry. Looking at them, it becomes clear that INDXParse detected this false entry instead of the real one.</p>
<p>Let&rsquo;s take a second look at the output of INDXParse:</p>
<p><img loading="lazy" src="images/indxparse_output.png" alt=""  />
</p>
<ul>
<li>As we have just seen, the creation time in the false entry - <code>54 2B 00 00 00 00 D1 01</code>, matches the creation time in the third output line, and is actually the parent directory reference in the real entry.</li>
</ul>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>The physical size in the false entry (marked in brown) matches the physical size in the third output line (~118 petabytes). This value is the last access time in the real entry, which explains why it is so ridiculous as a file size.</li>
</ul>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>The filename (marked in blue) starts with 0x04, which is an EOT character. Then there&rsquo;s 0x6F, which is a lowercase O, and 0x0D - a carriage return character (CR), which excel interprets as a new line. This character sequence is actually the second output line.</li>
</ul>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>The rest of the filename is in the third output line. It&rsquo;s cut-off, because the filename length in the false entry (marked in red) is a lot shorter than the real one.</li>
</ul>
<h2 id="avoiding-false-entries">Avoiding False Entries</h2>
<p>Unfortunately, false entries cannot be entirely avoided. When carving data from an unstructured binary blob, there&rsquo;s always a risk of false positives. Nevertheless, the false positive rate can be reduced with more in-depth validation of the carved data.</p>
<p>The false entry shown above can be easily identified as one:</p>
<ul>
<li>The filename contains control characters. While most of the characters in the Unicode &ldquo;Control&rdquo; category are allowed in filenames, they are very rarely used in them.</li>
</ul>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>The file&rsquo;s physical size, besides being absolutely ridiculous, is not a multiple of the file-system&rsquo;s cluster size. This is an obvious red flag.</li>
</ul>
<p>I implemented similar validations in <em>my</em> tool, INDXRipper - so in this case, it ignores the false entry and outputs the real one, as it should. Those validations aren&rsquo;t foolproof, though. $I30 slack space is unpredictable, so there&rsquo;s always a chance they will fail.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Home Adventures! A Prefetch File in $I30 Slack, PyInstaller &amp; Prefetch Hash Cracking</title>
      <link>https://harelsegev.github.io/posts/home-adventures/home-adventures-a-prefetch-file-in-i30-slack-pyinstaller-prefetch-hash-cracking/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://harelsegev.github.io/posts/home-adventures/home-adventures-a-prefetch-file-in-i30-slack-pyinstaller-prefetch-hash-cracking/</guid>
      <description>I often test my tools on my old computer at home. It&amp;rsquo;s so much more interesting to investigate than a newly created virtual machine. Today, while testing, I found evidence of activity from almost 2 years ago. It got me really excited, and I thought it would make a cool blog post!
Here&amp;rsquo;s a snippet from the timeline I created using MFTECmd and INDXRipper:
A Prefetch File in $I30 Slack The Prefetch file FLOSS64.</description>
      <content:encoded><![CDATA[<p>I often test my tools on my old computer at home. It&rsquo;s so much more interesting to investigate than a newly created virtual machine. Today, while testing, I found evidence of activity from almost 2 years ago. It got me really excited, and I thought it would make a cool blog post!</p>
<p>Here&rsquo;s a snippet from the timeline I created using MFTECmd and INDXRipper:</p>
<p><img loading="lazy" src="images/timeline.jpg" alt=""  />
</p>
<h2 id="a-prefetch-file-in-i30-slack">A Prefetch File in $I30 Slack</h2>
<p>The Prefetch file <code>FLOSS64.EXE-F5F88991.pf</code> was created on September 10th 2020. Today is July 2nd 2022; almost 2 years have passed! There&rsquo;s no trace of this file in the MFT, nor in  $J - which goes only a week back. The only thing left proving this file once existed is a $I30 entry in slack space of the Prefetch folder.</p>
<p>This Prefetch file must have been created because I executed Floss, which is a tool from FireEye. But <code>floss64.exe</code> is not in the MFT or in $J. It&rsquo;s not in my timeline, meaning INDXRipper could not find it in $I30 of any directory. I parsed the ShimCache and AmCache, but there was nothing there either.</p>
<blockquote>
<p>The $I30 of the Prefetch folder is a forensic goldmine; The $I30s from the users&rsquo; Recent folders are also very valuable. When triaging a system, I usually collect the $I30s from such key folders, these are just a few examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>C:\Windows\Prefetch
</span></span><span style="display:flex;"><span>C:\Users\<span style="color:#f92672">*</span>\AppData\Roaming\Microsoft\Windows\Recent
</span></span><span style="display:flex;"><span>C:\ProgramData\Microsoft\Windows Defender\LocalCopy
</span></span><span style="display:flex;"><span>C:\Users\<span style="color:#f92672">*</span>\Downloads
</span></span><span style="display:flex;"><span>C:\PerfLogs
</span></span></code></pre></div><p>I use RawCopy to collect these; KAPE does not currently support $I30 collection.</p>
</blockquote>
<p>The Prefetch file was created at 23:14:57, probably right after <code>floss64.exe</code> was first executed. We can also see a last modification time at 23:25:35. If I were to find this Prefetch file in the MFT, and this last modification timestamp were from <code>$STANDATD_INFORMATION</code>, I would say that it indicates the last execution time of <code>floss64.exe</code>. However, this timestamp is from $I30 slack, so this might not be the case.</p>
<p>I know what you think - $I30 timestamps should mirror those in the <code>$STANDATD_INFORMATION</code> attribute! And you are absolutely right. But $I30 entries, as opposed to MFT entries, can move around throughout their lifetime. When a file is created or deleted in a directory, $I30 entries of other files in the directory may be unallocated, and then reallocated in a different place. This entry could have been unallocated while the Prefetch file was still active! In this case, the entry may contain outdated information.</p>
<h2 id="pyinstaller">PyInstaller</h2>
<p>Floss is written in Python, and is packaged with PyInstaller. Here&rsquo;s is a brief description of PyInstaller, straight from its manual:</p>
<blockquote>
<p>PyInstaller bundles a Python application and all its dependencies into a single package. The user can run the packaged app without installing a Python interpreter or any modules.</p>
</blockquote>
<p>There are also details about its inner workings:</p>
<blockquote>
<p>[&hellip;] The bootloader is the heart of the one-file bundle also. When started it creates a temporary folder in the appropriate temp-folder location for this OS. The folder is named <code>_MEI*xxxxxx*</code>, where <em>xxxxxx</em> is a random number. [&hellip;] The bootloader uncompresses the support files and writes copies into the temporary folder.</p>
</blockquote>
<p>At 23:28:52, The folder <code>_MEI86322</code> was created in my user&rsquo;s <code>Temp</code> directory, which indicates I executed a PyInstaller executable. INDXRipper was kind enough to parse the $I30 of this folder for us, so we can see a compiled python module (.pyd file) that was created inside the folder and deleted since.</p>
<p>My guess is that <code>floss64.exe</code> was first executed at 23:14:57, then executed again at 23:25:35, and then again at 23:28:52. The $I30 entry we found in slack space was unallocated somewhere between 23:25:35 and 23:28:52, so the last modification time wasn&rsquo;t updated the next time <code>floss64.exe</code> was executed.</p>
<p>An interesting thing to note, is that we only see a single <code>_MEI*xxxxxx*</code> folder; yet, we know a unique one should have been created for every execution of <code>floss64.exe</code>.</p>
<blockquote>
<p>When the bundled code terminates, the bootloader deletes the temporary folder. [&hellip;] The <code>_MEI*xxxxxx*</code> folder is not removed if the program crashes or is killed</p>
</blockquote>
<p>This is interesting! The folder <code>_MEI86322</code> is not deleted, so <code>floss64.exe</code> might have crashed after it was executed at 23:28:52. I looked for an error report, but couldn&rsquo;t find one.</p>
<h2 id="prefetch-hash-cracking">Prefetch Hash Cracking</h2>
<p>Can we find the folder from which <code>floss64.exe</code> was executed? Unfortunately, ShimCache and AmCache aren&rsquo;t much help this time. A cool thing we can try is to brute-force the Prefetch hash; i.e, hashing possible full paths of <code>floss64.exe</code> until the result matches the Prefetch hash, which is <code>F5F88991</code>. I wrote a little tool to do this for me; I just have to give it the bodyfile I used to create the timeline, so it can enumerate all the folders <code>floss64.exe</code> might have been executed from:</p>
<p><img loading="lazy" src="images/hash_cracker.jpg" alt=""  />
</p>
<p>This doesn&rsquo;t always work, but this time it did! <code>floss64.exe</code> was executed from the Forensics directory on the C: drive.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>That&rsquo;s it for this post! I wanted to demonstrate both the value and the subtleties of $I30 analysis; let me know if you found that educational. Also, I&rsquo;m no expert; If you think I got something wrong, please tell me. Home Adventures may become a series if I find the time for it. I may also write a detailed post about INDXRipper; Let me know if you&rsquo;d be interested in that!</p>
<h3 id="tool-list">Tool List</h3>
<table>
<thead>
<tr>
<th>Tool</th>
<th>Source</th>
</tr>
</thead>
<tbody>
<tr>
<td>MFTECmd</td>
<td><a href="https://github.com/EricZimmerman/MFTECmd">https://github.com/EricZimmerman/MFTECmd</a></td>
</tr>
<tr>
<td>INDXRipper</td>
<td><a href="https://github.com/harelsegev/INDXRipper">https://github.com/harelsegev/INDXRipper</a></td>
</tr>
<tr>
<td>Prefetch Hash Cracker</td>
<td><a href="https://github.com/harelsegev/prefetch-hash-cracker">https://github.com/harelsegev/prefetch-hash-cracker</a></td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
